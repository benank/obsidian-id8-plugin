import * as fs from "fs/promises";
import * as path from "path";
import builtins from "builtin-modules";
import * as esbuild from "esbuild";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const copyPlugin = {
	name: "copy-files",
	setup(build: esbuild.PluginBuild) {
		build.onEnd(async () => {
			const destDir = path.resolve("id8-plugin");
			await fs.mkdir(destDir, { recursive: true });
			await Promise.all([
				fs.copyFile("manifest.json", path.join(destDir, "manifest.json")),
				fs.copyFile("main.js", path.join(destDir, "main.js")),
			]);
			console.log("Copied manifest.json and main.js to ./id8-plugin");
		});
	},
};

(async () => {
	const context = await esbuild.context({
		banner: {
			js: banner,
		},
		entryPoints: ["main.ts"],
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins],
		format: "cjs",
		target: "es2018",
		logLevel: "info",
		sourcemap: prod ? false : "inline",
		treeShaking: true,
		outfile: "main.js",
		minify: prod,
		plugins: [copyPlugin],
	});

	if (prod) {
		await context.rebuild();
		process.exit(0);
	} else {
		await context.watch();
	}
})();
